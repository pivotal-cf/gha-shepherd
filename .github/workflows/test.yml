name: Test Workflow

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  test:
    name: Demo Typical Usecase
    runs-on: ubuntu-latest
    steps:
      - name: Checkout cli bosh release repo
        uses: actions/checkout@v4

      - name: Run arbitrary command via configured shepherd
        uses: ./
        with:
          command:      shell
          debug:        ${{ runner.debug }}
          api_token:    ${{ secrets.API_TOKEN }}
          api_endpoint: ${{ vars.API_ENDPOINT }}
          namespace:    official
          run: |
            echo "List all available pools"
            # shepherd list pool --namespace "${NAMESPACE:?}"
            exit 0
            echo "Wont reach to this point"

      - name: Create environment with provided pool_name and pool_namespace
        id:   create-env
        if:   ${{ !vars.ENV_ID }}
        uses: ./
        with:
          command:         create
          debug:           ${{ runner.debug }}
          api_token:       ${{ secrets.API_TOKEN }}
          api_endpoint:    ${{ vars.API_ENDPOINT }}
          pool_name:       cfd
          pool_namespace:  official
          namespace:       tas-devex
          duration:        15m

      - name: Get running env metadata
        uses: ./
        with:
          command:        get
          debug:          ${{ runner.debug }}
          api_token:      ${{ secrets.API_TOKEN }}
          api_endpoint:   ${{ vars.API_ENDPOINT }}
          env_id:         ${{ vars.ENV_ID || steps.create-env.outputs.env-id }}
          namespace:      tas-devex
          env_file_path:  ./lease.json

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: lease-json
          path: lease.json

      - name: Print env details
        run: |
          jq -r 'keys[] as $k | "\n\($k): \(.[$k] | tojson)"' lease.json

      - name: Delete lease with provided env_id and namespace
        if:   ${{ always() && !vars.ENV_ID }}
        uses: ./
        with:
          command:      delete
          debug:        ${{ runner.debug }}
          api_token:    ${{ secrets.API_TOKEN }}
          api_endpoint: ${{ vars.API_ENDPOINT }}
          env_id:       ${{ steps.create-env.outputs.env-id }}
          namespace:    tas-devex
